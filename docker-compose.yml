# docker-compose.yml

services:
  # --- API Service ---
  api:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    env_file:
      - .env
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # --- Frontend Service (with the fix) ---
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      # 1. Mount our local source code to the container's /app directory.
      #    This allows for live-reloading when we change files locally.
      - ./frontend:/app
      # 2. **THE FIX**: Create an anonymous volume for /app/node_modules.
      #    This tells Docker: "Do not mount the host's node_modules folder
      #    over the container's. Let the container use the one it installed
      #    during the 'docker build' step." This solves the SWC architecture mismatch.
      - /app/node_modules
    env_file:
      - .env
    environment:
      # Ensure the environment is set to 'development' for the dev server.
      - NODE_ENV=development
    # This command starts Next.js's hot-reloading development server.
    command: npm run dev
    depends_on:
      - api

  # --- Database and Cache Services (Unchanged) ---
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    ports:
      - "8080:8080"

volumes:
  postgres_data: